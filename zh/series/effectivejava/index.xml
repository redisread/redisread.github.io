<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>EffectiveJava on ✏Victor&#39;s Blog</title>
    <link>https://hugo.jiahongw.com/zh/series/effectivejava/</link>
    <description>Recent content in EffectiveJava on ✏Victor&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>1427298682@qq.com (VictorHong)</managingEditor>
    <webMaster>1427298682@qq.com (VictorHong)</webMaster>
    <copyright>&amp;copy;{year}, Redisread</copyright>
    <lastBuildDate>Sat, 16 Oct 2021 18:35:36 +0800</lastBuildDate>
    
        <atom:link href="https://hugo.jiahongw.com/zh/series/effectivejava/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>2-当构造函数有多个参数时，考虑改用构建器</title>
        <link>https://hugo.jiahongw.com/zh/posts/bookeffectivejava/2%E5%9C%A8%E9%9D%A2%E5%AF%B9%E5%A4%9A%E4%B8%AA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E6%97%B6%E8%AF%B7%E8%80%83%E8%99%91%E6%9E%84%E5%BB%BA%E5%99%A8/</link>
        <pubDate>Sat, 16 Oct 2021 18:35:36 +0800</pubDate>
        <author>1427298682@qq.com (VictorHong)</author>
        <guid>https://hugo.jiahongw.com/zh/posts/bookeffectivejava/2%E5%9C%A8%E9%9D%A2%E5%AF%B9%E5%A4%9A%E4%B8%AA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E6%97%B6%E8%AF%B7%E8%80%83%E8%99%91%E6%9E%84%E5%BB%BA%E5%99%A8/</guid>
        <description>多参数构造函数的问题 静态工厂和构造函数都有一个局限：它们不能对大量可选参数做很好的扩展。以一个类为例，它表示包装食品上的营养标签。这些标签上</description>
      </item>
      
      <item>
        <title>1-考虑以静态工厂方法代替构造函数-《Effective Java》笔记</title>
        <link>https://hugo.jiahongw.com/zh/posts/bookeffectivejava/1%E8%80%83%E8%99%91%E4%BB%A5%E9%9D%99%E6%80%81%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E4%BB%A3%E6%9B%BF%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</link>
        <pubDate>Sat, 16 Oct 2021 16:42:14 +0800</pubDate>
        <author>1427298682@qq.com (VictorHong)</author>
        <guid>https://hugo.jiahongw.com/zh/posts/bookeffectivejava/1%E8%80%83%E8%99%91%E4%BB%A5%E9%9D%99%E6%80%81%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E4%BB%A3%E6%9B%BF%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</guid>
        <description>什么是静态工厂方法？ 一个类可以提供公共静态工厂方法，它只是一个返回类实例的静态方法。 例如Boolean （boolean 的包装类）的简单示例。</description>
      </item>
      
    
  </channel>
</rss>