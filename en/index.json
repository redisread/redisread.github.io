[{"description":"","id":2,"section":"zh","tags":["域名","freenom"],"title":"Freenom 免费域名申请 \u0026 自动域名续费","uri":"https://hugo.jiahongw.com/en/zh/posts/usefulpower/freenom-domain/"},{"description":"通常我们使用编辑器，写出来的Markdown不太符合标准的Markdown格式，例如多个无用的换行和空格，以及图片未添加描述等。通过工具可以让我们写出更标准的Markdown文章。","id":3,"section":"zh","tags":["Markdown"],"title":"使用Markdown规范检查工具","uri":"https://hugo.jiahongw.com/en/zh/posts/hugo/markdown-lint/"},{"description":"","id":4,"section":"zh","tags":["Java","CompletableFuture"],"title":"CompletableFuture笔记","uri":"https://hugo.jiahongw.com/en/zh/posts/java/completablefuture/"},{"description":"设计模式基于设计原则。","id":5,"section":"zh","tags":["设计模式","设计原则"],"title":"设计模式小记","uri":"https://hugo.jiahongw.com/en/zh/posts/designpattern/design-pattern-note/"},{"description":"代理模式为另一个对象提供一个替身或者占位符以控制这个对象的访问。","id":6,"section":"zh","tags":["设计模式","代理模式"],"title":"代理模式","uri":"https://hugo.jiahongw.com/en/zh/posts/designpattern/proxypattern/"},{"description":"","id":7,"section":"zh","tags":[null],"title":"组合模式","uri":"https://hugo.jiahongw.com/en/zh/posts/designpattern/compositepattern/"},{"description":"迭代器模式提供了一种方法顺序访问一个聚合对象中的各个元素，而不暴露其内部的表示。","id":8,"section":"zh","tags":["设计模式","迭代器模式"],"title":"迭代器模式","uri":"https://hugo.jiahongw.com/en/zh/posts/designpattern/iteratorpattern/"},{"description":"模板方法模式是对抽象的有一种体现，这次，抽象的是算法流程。模板方法定义了一个算法的步骤，将允许子类为一个或者多个步骤提供实现。","id":9,"section":"zh","tags":["设计模式","模板方法模式"],"title":"模板方法模式","uri":"https://hugo.jiahongw.com/en/zh/posts/designpattern/templatemethodpattern/"},{"description":"外观模式也叫做门面模式，外观模式定义了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。","id":10,"section":"zh","tags":["设计模式","外观模式","门面模式"],"title":"外观模式","uri":"https://hugo.jiahongw.com/en/zh/posts/designpattern/facadepattern/"},{"description":"适配器使得新的调用可以适配老的接口而不需要修改旧的代码。达到了对拓展开发，对修改关闭的设计原则。","id":11,"section":"zh","tags":["设计模式","适配器模式"],"title":"适配器模式","uri":"https://hugo.jiahongw.com/en/zh/posts/designpattern/adaptorpattern/"},{"description":"命令模式将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也可以支持撤销的操作。","id":12,"section":"zh","tags":["设计模式","命令模式"],"title":"命令模式","uri":"https://hugo.jiahongw.com/en/zh/posts/designpattern/commandpattern/"},{"description":"使用plantUML表示一些关系和状态图更加清晰。","id":13,"section":"zh","tags":["工具","plantUML"],"title":"plantUML使用笔记","uri":"https://hugo.jiahongw.com/en/zh/posts/efficient/plantuml-note/"},{"description":"装饰器模式动态的将责任附加到对象上，若要拓展功能，装饰者提供了比继承更有弹性的替代方案。","id":14,"section":"zh","tags":["装饰器模式","设计模式"],"title":"设计模式-装饰器模式","uri":"https://hugo.jiahongw.com/en/zh/posts/designpattern/decoratorpattern/"},{"description":"一个比喻：报纸订阅（出版者和订阅者）。","id":15,"section":"zh","tags":["观察者模式","行为模式"],"title":"观察者模式","uri":"https://hugo.jiahongw.com/en/zh/posts/designpattern/observerpattern/"},{"description":"IDEA实用的插件列表","id":16,"section":"zh","tags":["IDEA"],"title":"IDEA实用的插件列表","uri":"https://hugo.jiahongw.com/en/zh/talks/idea-plugins/"},{"description":"","id":17,"section":"zh","tags":["Nvchad","nvim","vim"],"title":"Nvchad使用","uri":"https://hugo.jiahongw.com/en/zh/posts/efficient/nvchad%E4%BD%BF%E7%94%A8/"},{"description":"相对于直接new来创建对象，用工厂模式来创建究竟有什么好处呢？","id":18,"section":"zh","tags":["设计模式","工厂方法","抽象工厂","简单工厂"],"title":"工厂方法模式","uri":"https://hugo.jiahongw.com/en/zh/posts/designpattern/factorymethodpattern/"},{"description":"单例模式是一种创建型设计模式， 让你能够保证一个类只有一个实例， 并提供一个访问该实例的全局节点。","id":19,"section":"zh","tags":["设计模式","单例模式"],"title":"单例模式","uri":"https://hugo.jiahongw.com/en/zh/posts/designpattern/singletonpattern/"},{"description":"建造者模式主要是为了解决调用构造函数的时候，参数太多，并且有一些是可选参数不填的情况。这种情况下，使用建造者模式会更加灵活.","id":20,"section":"zh","tags":["设计模式","建造者模式"],"title":"建造者模式","uri":"https://hugo.jiahongw.com/en/zh/posts/designpattern/builderpattern/"},{"description":"如何做好系统设计，架构制图是重要的一环。","id":21,"section":"zh","tags":["架构"],"title":"架构制图","uri":"https://hugo.jiahongw.com/en/zh/posts/systemarchitecture/architecture-drawing/"},{"description":"国庆期间，去了一趟青岛。","id":22,"section":"zh","tags":["青岛","Life"],"title":"青岛之旅","uri":"https://hugo.jiahongw.com/en/zh/posts/life/qingdao-travel/"},{"description":"记录北京的照片生活","id":23,"section":"zh","tags":[null],"title":"北京的日子","uri":"https://hugo.jiahongw.com/en/zh/gallery/beijing/"},{"description":"记录Effective Java的一些重点","id":24,"section":"zh","tags":["Java","Effective Java"],"title":"java8笔记📒","uri":"https://hugo.jiahongw.com/en/zh/posts/java/java8-note/"},{"description":"","id":25,"section":"zh","tags":["vim"],"title":"vim使用笔记","uri":"https://hugo.jiahongw.com/en/zh/posts/efficient/vim/"},{"description":"生活中很少注意一些东西，错过了就将不复存在。珍惜当下！","id":26,"section":"zh","tags":["Life"],"title":"一篇文章想到父亲","uri":"https://hugo.jiahongw.com/en/zh/posts/life/myfather-some/"},{"description":"Youtube中的一个非常有意思的视频活动。在芝加哥的大街上，看看路人能否姐姐一些初级的编程问题。","id":27,"section":"zh","tags":["FunnySharing"],"title":"街头代码编程","uri":"https://hugo.jiahongw.com/en/zh/posts/life/code-problem-solving-onstreet/"},{"description":"在Java 5中，引入了自动装箱和自动拆箱功能（boxing/unboxing），Java可以根据上下文，自动进行转换，极大地简化了相关编程。","id":28,"section":"zh","tags":["Java"],"title":"Java装箱拆箱","uri":"https://hugo.jiahongw.com/en/zh/posts/java/boxing-unboxing/"},{"description":"极化码的编码就是一些简单的线性运算，通过矩阵进行简化多维的运算，归根到底还是基于基本的异或操作。","id":29,"section":"zh","tags":["PolarCode","编码"],"title":"极化码-编码","uri":"https://hugo.jiahongw.com/en/zh/posts/polarcode/polar-code-encode/"},{"description":"介绍关于极化码的一些基本的数学与计算原理，包括如何进行概率的转移的。","id":30,"section":"zh","tags":["PolarCode","基本原理"],"title":"极化码-基本原理","uri":"https://hugo.jiahongw.com/en/zh/posts/polarcode/polar-code-fundamentals/"},{"description":"在信息论中，信道是指信息传输的通道。我们在实际通信中所利用的各种物理通道是信道的最典型的例子，如电缆、光纤、电波传布的空间、载波线路等等。但是极化码的信道模型将他们进行了抽象，将信道分成了几类：BEC、BSC、AWGN。","id":31,"section":"zh","tags":["PolarCode","信道模型"],"title":"极化码-信道模型","uri":"https://hugo.jiahongw.com/en/zh/posts/polarcode/polar-code-channel-model/"},{"description":"译码和编码类似，基于递归的结构。","id":32,"section":"zh","tags":["PolarCode","极化码译码"],"title":"极化码-译码","uri":"https://hugo.jiahongw.com/en/zh/posts/polarcode/polar-code-decode/"},{"description":"在大学的最后一次和朋友的旅行......","id":33,"section":"zh","tags":["life"],"title":"毕业旅行-川西","uri":"https://hugo.jiahongw.com/en/zh/posts/life/biyeluxing/"},{"description":"川西毕业旅行","id":34,"section":"zh","tags":null,"title":"川西","uri":"https://hugo.jiahongw.com/en/zh/gallery/chuanxi/"},{"description":"极化码已经入选5G的标准，是唯一一个被证明可以达到香农极限的一种编码方式。","id":35,"section":"zh","tags":["PolarCode"],"title":"5G下的极化码","uri":"https://hugo.jiahongw.com/en/zh/posts/polarcode/polar-code-intro/"},{"description":"策略模式定义了算法族，分别封装起来，让他们之间可以互相替换","id":36,"section":"zh","tags":["行为模式","策略模式"],"title":"策略模式","uri":"https://hugo.jiahongw.com/en/zh/posts/designpattern/strategypattern/"},{"description":"使用Nginx + certbot快速的配置一个可以https访问的网站。","id":37,"section":"zh","tags":["nginx"],"title":"Nginx配置SSL证书","uri":"https://hugo.jiahongw.com/en/zh/posts/nginx/nginx-ssl/"},{"description":"程序代码是作为二进制数据存储在内存的，同样程序的数据也在内存中，因此直接从内存的二进制形式上是无法区分哪些是数据哪些是代码的，这也为缓冲区溢出攻击提供了可能。","id":38,"section":"zh","tags":["Linux"],"title":"缓冲区溢出","uri":"https://hugo.jiahongw.com/en/zh/posts/linux/buffer-overflow/"},{"description":"链接(linking)是将各种代码和数据片段收集并组合成为一个单一文件的过程，这个文件可被加载（复制）到内存并执行。","id":39,"section":"zh","tags":["Linux"],"title":"linking","uri":"https://hugo.jiahongw.com/en/zh/posts/linux/linking/"},{"description":"LInux链接器有强大的库打桩机制，它允许你对共享库的代码进行截取，从而执行自己的代码。而为了调试，你通常可以在自己的代码中加入一些调试信息，例如，调用次数，打印信息，调用时间等等。","id":40,"section":"zh","tags":["MLK"],"title":"打桩机制","uri":"https://hugo.jiahongw.com/en/zh/posts/%E5%87%86%E5%A4%87%E4%B8%A2%E5%BC%83/mlk/interposition/"},{"description":"一个基于概率内存安全的运行时系统。","id":41,"section":"zh","tags":["MLK"],"title":"DieHard","uri":"https://hugo.jiahongw.com/en/zh/posts/%E5%87%86%E5%A4%87%E4%B8%A2%E5%BC%83/mlk/diehard/"},{"description":"官方首页上这个骑士与恶龙的绘画由伦敦画家 Rupert Lees 创作。灵感来自于神话传说 St George and the Dragon 。某日，圣乔治到利比亚去，当地沼泽中的一只恶龙（一说鳄鱼）在水泉旁边筑巢，这水泉是Silene城唯一的水源，市民为了取水，每天都要把两头绵羊献祭给恶龙。 到后来，绵羊都吃完了，只好用活人来替代，每天抽签决定何人应选派作牺牲。 有一天，国王的女儿被抽中，国王也没有办法，悲痛欲绝。当少女走近，正要被恶龙吞吃时，圣乔治在这时赶到，提起利矛对抗恶龙，并用腰带把它束缚住，牵到城里当众杀死，救出了公主。","id":42,"section":"zh","tags":["MLK"],"title":"Valgrind","uri":"https://hugo.jiahongw.com/en/zh/posts/%E5%87%86%E5%A4%87%E4%B8%A2%E5%BC%83/mlk/valgrind/"},{"description":"DUMA是一个开源库(在GNU通用公共许可证下)，用于检测C和C++程序中的缓冲区溢出和运行错误，是一个Red-Zone memory allocator。","id":43,"section":"zh","tags":["MLK"],"title":"duma","uri":"https://hugo.jiahongw.com/en/zh/posts/%E5%87%86%E5%A4%87%E4%B8%A2%E5%BC%83/mlk/duma/"},{"description":"Electric Fence是另一种malloc（）调试器。它使用系统的虚拟内存硬件来检测软件何时超出了malloc（）缓冲区的边界。它还将检测free（）释放的任何内存访问。","id":44,"section":"zh","tags":["MLK"],"title":"Eletric-Fence","uri":"https://hugo.jiahongw.com/en/zh/posts/%E5%87%86%E5%A4%87%E4%B8%A2%E5%BC%83/mlk/eletric-fence/"},{"description":"DBGMEM是用于C和C ++程序的功能丰富的内存调试器。目前仅适用于Linux。","id":45,"section":"zh","tags":["MLK"],"title":"Dbgmem","uri":"https://hugo.jiahongw.com/en/zh/posts/%E5%87%86%E5%A4%87%E4%B8%A2%E5%BC%83/mlk/dbgmem/"},{"description":"A Fast Address Sanity Checker","id":46,"section":"zh","tags":["MLK"],"title":"AddressSanitizer Tool","uri":"https://hugo.jiahongw.com/en/zh/posts/%E5%87%86%E5%A4%87%E4%B8%A2%E5%BC%83/mlk/addresssanitizer/"},{"description":"在一个7位的信息中，单个位出错有7种可能，因此3个错误控制位就足以确定是否出错及哪一位出错了。","id":47,"section":"zh","tags":["汉明码"],"title":"汉明码","uri":"https://hugo.jiahongw.com/en/zh/posts/network/hamming-code/"},{"description":"永远不要因为「现在很差」而跳槽，要因为「未来更好」而跳槽。只有这样才能保证你一直往上走。","id":48,"section":"zh","tags":["跳槽"],"title":"程序员职业路线","uri":"https://hugo.jiahongw.com/en/zh/posts/ideas/programer-go-go/"},{"description":"一个好的习惯能够让你做事情更加的轻松，也能够展示你这个人的风格；好的习惯是后天养成的，不是一蹴而就的。","id":49,"section":"zh","tags":["习惯"],"title":"高效人士的几个习惯","uri":"https://hugo.jiahongw.com/en/zh/posts/ideas/seven-habits/"},{"description":"新一代HTTP协议，成为HTTP/3，基于UDP，非常强大.有更快速、更灵活、更安全的特点。","id":50,"section":"zh","tags":["quic"],"title":"Quic协议为什么这么好","uri":"https://hugo.jiahongw.com/en/zh/posts/network/quic-protocol/"},{"description":"以往的拥塞控制算法是基于TCP丢包的，随着技术的发展，也出现了基于链路容量的一些拥塞控制算法，例如BBR，使得拥塞控制也可以基于UDP，更进一步的推动了HTTP/3的发展。","id":51,"section":"zh","tags":["拥塞控制"],"title":"拥塞控制算法","uri":"https://hugo.jiahongw.com/en/zh/posts/network/congestion-control/"},{"description":"哈夫曼编码算法用字符在文件中出现的频率表来建立一个用0，1串表示各字符的最优表示方式。","id":52,"section":"zh","tags":["huffman"],"title":"Huffman Tree是如何编码的？","uri":"https://hugo.jiahongw.com/en/zh/posts/algorithmstructure/huffman-coding/"},{"description":"使用Nginx配合CloudFlare设置服务器使用Https证书。","id":53,"section":"zh","tags":["Nginx","https"],"title":"CloudFlare+Nginx配置HTTPS连接","uri":"https://hugo.jiahongw.com/en/zh/posts/%E5%87%86%E5%A4%87%E4%B8%A2%E5%BC%83/https-set/"},{"description":"Http是定义在TCP上的一种传输协议，要传输消息就必须遵守规定，本文是使用Http的发送消息与接受消息的报文规定及方法。","id":54,"section":"zh","tags":["http"],"title":"Http报文格式及Http方法","uri":"https://hugo.jiahongw.com/en/zh/posts/network/http-message/"},{"description":"本文详细介绍了多路复用中的三种模型，它们是迭代更新的结果。现在常用的会是Epoll。","id":55,"section":"zh","tags":["Epoll","Select","Poll"],"title":"Select Poll Epoll 详解","uri":"https://hugo.jiahongw.com/en/zh/posts/linux/select-poll-epoll/"},{"description":"虚拟内存是操作系统物理内存和进程之间的中间层，它为进程隐藏了物理内存这一概念，为进程提供了更加简洁和易用的接口以及更加复杂的功能。","id":56,"section":"zh","tags":["虚拟内存"],"title":"Linux虚拟内存与分页存储管理","uri":"https://hugo.jiahongw.com/en/zh/posts/linux/virtual-memory/"},{"description":"把有趣的东西记录下来，才能记住当下自己在做什么！","id":57,"section":"zh","tags":["life"],"title":"博客小记","uri":"https://hugo.jiahongw.com/en/zh/posts/ideas/first-thoughts/"},{"description":"哈希表（Hash table，也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构。。","id":58,"section":"zh","tags":["数据结构","哈希表"],"title":"哈希表","uri":"https://hugo.jiahongw.com/en/zh/posts/algorithmstructure/hash/"},{"description":"","id":60,"section":"zh","tags":["Linux"],"title":"Linux内存管理","uri":"https://hugo.jiahongw.com/en/zh/posts/linux/memory-control/"},{"description":"网络层浅析","id":61,"section":"zh","tags":["计算机网络","网络层"],"title":"网络层","uri":"https://hugo.jiahongw.com/en/zh/posts/network/net-level/"},{"description":"","id":62,"section":"zh","tags":["Linux","epoll"],"title":"epoll的水平触发与边缘触发","uri":"https://hugo.jiahongw.com/en/zh/posts/linux/epoll-lt-et/"},{"description":"http协议迭代了好几个版本，从一开始的短链接模型到长连接模型，最后还衍生出二进制帧层......","id":63,"section":"zh","tags":["network","http","https"],"title":"Http协议浅析","uri":"https://hugo.jiahongw.com/en/zh/posts/network/http/"},{"description":"","id":64,"section":"zh","tags":["二叉树"],"title":"高级的二叉树","uri":"https://hugo.jiahongw.com/en/zh/posts/algorithmstructure/bst/"},{"description":"","id":65,"section":"zh","tags":["C++","UE4","Game"],"title":"UE编辑器下模拟使用HitProxy","uri":"https://hugo.jiahongw.com/en/zh/posts/ue/ue-hitproxy/"},{"description":"","id":66,"section":"zh","tags":["C++","UE4","Game"],"title":"UE4获取深度值","uri":"https://hugo.jiahongw.com/en/zh/posts/ue/ue-depth/"},{"description":"","id":67,"section":"zh","tags":["C++","UE4","Game"],"title":"UE游戏、渲染线程","uri":"https://hugo.jiahongw.com/en/zh/posts/ue/ue-game-render/"},{"description":"虚幻引擎相关问题","id":68,"section":"zh","tags":[null],"title":"UE4 Problems","uri":"https://hugo.jiahongw.com/en/zh/talks/ue4-talks/"},{"description":"","id":69,"section":"zh","tags":["C++","UE4","Game"],"title":"UE4渲染过程","uri":"https://hugo.jiahongw.com/en/zh/posts/ue/ue4-render/"},{"description":"","id":70,"section":"zh","tags":["rsa"],"title":"RSA加密算法","uri":"https://hugo.jiahongw.com/en/zh/posts/cryptography/rsa/"},{"description":"","id":71,"section":"zh","tags":["C++"],"title":"C++学习路线","uri":"https://hugo.jiahongw.com/en/zh/talks/cpp_router/"},{"description":"","id":72,"section":"zh","tags":["Linux","grep","tar","gzip"],"title":"Linux实用指令","uri":"https://hugo.jiahongw.com/en/zh/posts/linux/linux-grep/"},{"description":"","id":73,"section":"zh","tags":["Linux","用户管理"],"title":"Linux用户管理","uri":"https://hugo.jiahongw.com/en/zh/posts/linux/linux-users/"},{"description":"","id":74,"section":"zh","tags":["Linux","Vim"],"title":"Linux编辑利器-Vim","uri":"https://hugo.jiahongw.com/en/zh/posts/linux/vim-use/"},{"description":"","id":75,"section":"zh","tags":["Linux","Shell","bash"],"title":"Linux命令与Shell","uri":"https://hugo.jiahongw.com/en/zh/posts/linux/linux-shell/"},{"description":"","id":76,"section":"zh","tags":["C++","多态"],"title":"C++动态与静态","uri":"https://hugo.jiahongw.com/en/zh/posts/candcplusplus/cpp-duotai/"},{"description":"","id":77,"section":"zh","tags":["C","文件读写"],"title":"C文件读写","uri":"https://hugo.jiahongw.com/en/zh/posts/candcplusplus/c-read-write/"},{"description":"","id":78,"section":"zh","tags":["tcp","udp","网络"],"title":"Udp-Tcp编程","uri":"https://hugo.jiahongw.com/en/zh/posts/network/udp-tcp/"},{"description":"","id":79,"section":"zh","tags":["git","github"],"title":"Git免密push","uri":"https://hugo.jiahongw.com/en/zh/posts/git/git-push-no-pw/"},{"description":"","id":80,"section":"zh","tags":["AES","密码学","加密"],"title":"Aes-高级加密标准","uri":"https://hugo.jiahongw.com/en/zh/posts/cryptography/aes/"},{"description":"","id":81,"section":"zh","tags":["Hash","Algorithm","md5","sha"],"title":"什么是Hash？","uri":"https://hugo.jiahongw.com/en/zh/posts/algorithmstructure/hash-circle/"},{"description":"","id":82,"section":"zh","tags":["算法","排序","C++"],"title":"排序算法总结","uri":"https://hugo.jiahongw.com/en/zh/posts/algorithmstructure/sort/"},{"description":"机器学习必须掌握的基础算法，学会这些基础，对后面的理解才会透彻","id":83,"section":"zh","tags":["机器学习","SVM","决策树","kNN","PCA"],"title":"机器学习基本算法","uri":"https://hugo.jiahongw.com/en/zh/posts/deeplearning/machine-learning-base/"},{"description":"","id":84,"section":"zh","tags":[null],"title":"Hero","uri":"https://hugo.jiahongw.com/en/zh/gallery/hero/"},{"description":"","id":85,"section":"zh","tags":["爬虫","Scrapy"],"title":"Scrapy框架","uri":"https://hugo.jiahongw.com/en/zh/posts/spider/scrapy-1/"},{"description":"","id":86,"section":"zh","tags":["ppt","blog"],"title":"Slides和网页PPT","uri":"https://hugo.jiahongw.com/en/zh/posts/usefulpower/ppt-use/"},{"description":"","id":89,"section":"zh","tags":["python","MXNet","深度学习","liner"],"title":"MXNet回顾","uri":"https://hugo.jiahongw.com/en/zh/posts/deeplearning/mxnet-begin/"},{"description":"","id":90,"section":"zh","tags":["markdown","Typora"],"title":"Markdown使用笔记","uri":"https://hugo.jiahongw.com/en/zh/posts/usefulpower/markdown-deep/"},{"description":"Guide to set Hugo site.","id":91,"section":"zh","tags":["Hugo","Github"],"title":"部署HUGO博客","uri":"https://hugo.jiahongw.com/en/zh/posts/hugo/hugo_setup/"},{"description":"Zzo about page","id":92,"section":"zh","tags":null,"title":"About","uri":"https://hugo.jiahongw.com/en/zh/about/"},{"description":"tabs, code-tabs, expand, alert, warning, notice, img, box","id":93,"section":"zh","tags":["shortcode"],"title":"Shortcodes使用","uri":"https://hugo.jiahongw.com/en/zh/posts/hugo/shortcodes/"},{"description":"","id":94,"section":"zh","tags":[null],"title":"互联网之子的故事","uri":"https://hugo.jiahongw.com/en/zh/talks/mylinks/"},{"description":"my gallery","id":96,"section":"zh","tags":[null],"title":"life","uri":"https://hugo.jiahongw.com/en/zh/gallery/life/"},{"description":"my gallery","id":97,"section":"zh","tags":[null],"title":"movie","uri":"https://hugo.jiahongw.com/en/zh/gallery/movie/"}]